// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.14.0
// source: peserta.proto

package peserta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PesertaClient is the client API for Peserta service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PesertaClient interface {
	FindPesertaByNis(ctx context.Context, in *PesertaRequest, opts ...grpc.CallOption) (*PesertaData, error)
}

type pesertaClient struct {
	cc grpc.ClientConnInterface
}

func NewPesertaClient(cc grpc.ClientConnInterface) PesertaClient {
	return &pesertaClient{cc}
}

func (c *pesertaClient) FindPesertaByNis(ctx context.Context, in *PesertaRequest, opts ...grpc.CallOption) (*PesertaData, error) {
	out := new(PesertaData)
	err := c.cc.Invoke(ctx, "/Peserta/FindPesertaByNis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PesertaServer is the server API for Peserta service.
// All implementations must embed UnimplementedPesertaServer
// for forward compatibility
type PesertaServer interface {
	FindPesertaByNis(context.Context, *PesertaRequest) (*PesertaData, error)
	mustEmbedUnimplementedPesertaServer()
}

// UnimplementedPesertaServer must be embedded to have forward compatible implementations.
type UnimplementedPesertaServer struct {
}

func (UnimplementedPesertaServer) FindPesertaByNis(context.Context, *PesertaRequest) (*PesertaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPesertaByNis not implemented")
}
func (UnimplementedPesertaServer) mustEmbedUnimplementedPesertaServer() {}

// UnsafePesertaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PesertaServer will
// result in compilation errors.
type UnsafePesertaServer interface {
	mustEmbedUnimplementedPesertaServer()
}

func RegisterPesertaServer(s grpc.ServiceRegistrar, srv PesertaServer) {
	s.RegisterService(&Peserta_ServiceDesc, srv)
}

func _Peserta_FindPesertaByNis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PesertaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PesertaServer).FindPesertaByNis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Peserta/FindPesertaByNis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PesertaServer).FindPesertaByNis(ctx, req.(*PesertaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Peserta_ServiceDesc is the grpc.ServiceDesc for Peserta service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Peserta_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Peserta",
	HandlerType: (*PesertaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindPesertaByNis",
			Handler:    _Peserta_FindPesertaByNis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "peserta.proto",
}
